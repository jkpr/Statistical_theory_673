round(10,5,3)
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
round(rnorm(10,5,3))
resamples <- lapply(1:20, function(i) sample(1:10, replace = T))
resamples
library(ggplot2)
?ggplot
?msleep
msleep
d <- density(stamp$Thickness)
peaksx <- d$x[diff(sign(diff(d$y)))==-2]
plot(d)
abline(v=peaksx)
d <- density(stamp$Thickness)
library(bootstrap)
d <- density(stamp$Thickness)
peaksx <- d$x[diff(sign(diff(d$y)))==-2]
plot(d)
abline(v=peaksx)
?stamp
peaksx
length(peaks)
length(peaksx)
density
?density
numPeaks <- function(bw, plotIt=FALSE) {
d <- density(stamp$Thickness, bw=bw)
peaksx <- d$x[diff(sign(diff(d$y)))==-2]
if (plotIt) {
plot(d)
abline(v=peaksx)
}
return(length(peaksx))
}
numPeaks(0.01,T)
numPeaks(0.02,T)
numPeaks(0.03,T)
numPeaks(0.001,T)
numPeaks(0.002,T)
numPeaks(0.003,T)
numPeaks(0.004,T)
numPeaks(0.005,T)
numPeaks(0.006,T)
numPeaks(0.007,T)
numPeaks(0.008,T)
numPeaks(0.008,F)
x <- seq(0.001, 0.010, by=0.001)
x
y <- sapply(x,numPeaks)
y
x <- seq(0.001, 0.010, by=0.0001)
y <- sapply(x,numPeaks)
y <- sapply(x,numPeaks)
plot(xy)
plot(x,y)
y <- sapply(x,numPeaks)
plot(x,y, type='h')
?sample
sample(stamp, replace=TRUE)
?stamp
which(y == 1)
x[59]
min(which(y==1))
x[min(which(y==1))]
x[min(which(y==1))]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(x,y)
source('~/.active-rstudio-document')
vec <- replicate(bootS(sBw), 100)
vec
?replicate
vec <- replicate(100, bootS(sBw))
vec
bootS(sBw)
data <- sample(stamp, replace=TRUE)
data
count <- numPeaks(data, sBw)
count
return(count)
vec <- replicate(100, bootS(sBw))
vec
vec <- replicate(1000, bootS(sBw))
vec
vec <- replicate(1000, bootS(0.0032))
vec
source('~/.active-rstudio-document')
vec
vec <- replicate(1000, bootS(0.0032))
vec
sample(stamp)
sample(stamp)$thickness
sample(stamp)$Thickness
density(sample(stamp)$Thickness, 0.032)
density(sample(stamp)$Thickness, 0.0032) -> d
d
plot(d)
d$x
sample(stamp)
sample(stamp$Thickness)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
vec
vec
source('~/.active-rstudio-document')
vec
sample(stamp)
hist(sample(stamp))
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp, replace=TRUE)$Thickness)
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=FALSE))
hist(sample(stamp$Thickness, replace=FALSE))
hist(sample(stamp$Thickness, replace=FALSE))
hist(sample(stamp$Thickness, replace=FALSE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
hist(sample(stamp$Thickness, replace=TRUE))
sample(stamp, replace=TRUE)
getMinBw <- function() {
data <- sample(stamp$Thickness, replace=TRUE)
x <- seq(0.001, 0.010, by=0.0001)
y <- sapply(x,numPeaks, data=data)
return(y)
}
vec1 <- replicate(1000, getMinBw)
dim(vec1)
getMinBw <- function() {
data <- sample(stamp$Thickness, replace=TRUE)
x <- seq(0.001, 0.010, by=0.0001)
y <- sapply(x,numPeaks, data=data)
sBw <- x[min(which(y==1))]
return(sBw)
}
vec1 <- replicate(1000, getMinBw)
vec1
vec1 <- replicate(1000, getMinBw())
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
getMinBw()
vec1 <- replicate(100, getMinBw())
vec1
vec1 <- replicate(100, getMinBw(1))
getMinBw <- function(nMode) {
data <- sample(stamp$Thickness, replace=TRUE)
x <- seq(0.001, 0.010, by=0.0001)
y <- sapply(x,numPeaks, data=data)
sBw <- x[min(which(y==nMode))]
return(sBw)
}
vec1 <- replicate(100, getMinBw(1))
vec1
vec1 <- replicate(100, getMinBw(2))
vec1
nMode <- 1
vec1 <- replicate(100, getMinBw(1))
sum(vec1 > nMode)
getMinBw <- function(nMode, isLarger = FALSE) {
data <- sample(stamp$Thickness, replace=TRUE)
x <- seq(0.001, 0.010, by=0.0001)
y <- sapply(x,numPeaks, data=data)
sBw <- x[min(which(y==nMode))]
yActual <- sapply(x, numPeaks, data=stamp$Thickness)
sBwActual <- x[min(which(yActual==nMode))]
if (isLarger){
return(sBw > sBwActual)
} else {
return(sBw)
}
}
nMode <- 1
vec1 <- replicate(100, getMinBw(nMode, TRUE))
vec1
sum(vec1) / length(vec1)
as.list(1:10)
dat <- c(114, 540, 203, 91, 117, 204, 163, 390, 256, 6, 89, 147, 18,
187, 55, 249, 197, 329, 66, 645, 331, 316, 102, 489, 111, 503,
478, 143, 204, 66, 47, 109, 178, 152, 398, 20, 204, 449, 136,
275, 226, 220, 37, 116, 62, 40, 198, 520, 151, 400, 294, 62,
223, 343, 226, 129, 228, 507, 79, 229, 108, 38, 441, 257, 132,
371, 76, 214, 211, 97, 131, 253, 14, 99, 154, 276, 294, 275,
246, 38, 87, 19, 302, 269, 154, 22, 129, 134, 371, 4, 343, 416,
190, 497, 592, 206, 129, 139, 184, 470, 420, 353, 87, 239, 224,
184, 49, 68, 625, 184, 43, 157, 27, 307, 12, 446, 59, 88, 319,
875, 214, 63, 44, 216, 165, 264, 159, 670, 178, 669, 219, 38,
237, 266, 224, 153, 122, 116, 250, 189, 173, 244, 228, 480, 538,
245, 238, 299, 203, 246, 359, 61, 254, 307, 55, 353, 170, 280,
199, 207, 360, 538, 204, 238, 260, 146, 43, 130, 225, 347, 111,
417, 1175, 74, 404, 792, 499, 63, 122, 262, 289, 487, 18, 68,
209, 423, 123, 541, 152, 291, 50, 164, 299, 67, 301, 193, 323,
93, 71, 61, 152, 39, 357, 17, 296, 299, 55, 504, 11, 71, 37,
409, 85, 229, 192, 181, 309, 24, 236, 216, 59, 137, 127, 168,
103, 83, 79, 70, 94, 207, 129, 95, 146, 206, 47, 239, 86, 506,
112, 125, 133, 40, 334, 167, 239, 404, 408, 81, 28, 589, 172,
443, 1036, 341, 209, 319, 152, 67, 288, 182, 101, 191, 571, 132,
217, 248, 76, 57, 189, 220, 113, 159, 83, 23, 15, 93, 193, 33,
351, 340, 739, 121, 74, 643, 288, 159, 238, 148, 92, 53, 209,
299, 123, 25, 39, 42, 84, 69, 259, 499, 255, 105, 375, 22, 84,
364, 513, 118, 370, 147, 249, 411, 328, 53, 568, 116, 45, 59,
53, 393, 144, 291, 111, 271, 364, 633, 72, 500, 234, 224, 271,
90, 25, 331, 138, 169, 505, 111, 231, 281, 299, 238, 414, 128,
381, 56, 147, 534, 214, 34, 414, 292, 182, 78, 90, 73, 317, 102,
214, 569, 134, 158, 847, 209, 167, 58, 364, 427, 380, 116, 546,
155, 105, 278, 288, 491, 281, 122, 502, 421, 122, 48, 141, 29,
95, 281, 83, 320, 100, 10, 124, 301, 263, 192, 510, 255, 343,
242, 274, 176, 74, 58, 82, 191, 259, 253, 469, 281, 30, 162,
33, 200, 405, 238, 454, 68, 333, 280, 119, 161, 104, 209, 11,
342, 473, 114, 234, 104, 130, 9, 470, 533, 43, 210, 77, 335,
67, 88, 146, 686, 125, 148, 165, 169, 354, 36, 633, 16, 189,
133, 300, 19, 185, 835, 160, 249, 245, 225, 22, 297, 27, 292,
264, 65, 506, 39, 324, 117, 55, 212, 318, 205, 377, 104, 249,
232, 600, 77, 158, 92, 519, 179, 168, 468, 92, 102, 551, 72,
81, 116, 162, 101, 699, 107, 295, 12, 11, 566, 166, 61)
81, 116, 162, 101, 699, 107, 295, 12, 11, 566, 166, 61)
dat
length(dat)
(1:10)^2
meanDat <- mean(dat)
meanDat
sum(dat/)/500
sum(dat)/500
?var
varDat <- mean((dat - meanDat)^2)
varDat
var(dat)
var(dat)*499
varDat*500
?optim
help(optim)
?optim
?dgamma
params <- list(theta1 = meanDat, theta2 = varDat)
theta1 <- params$theta1
# Variance
theta2 <- params$theta2
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
#pr(Y_i | \theta)
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
logPr
logY
logEY
1:10 + 2
log(theta1)
theta1
theta2
rgamma(200, shape = alpha, rate = beta)
?optim
optimOut <- optim(par = list(theta1 = meanDat, theta2 = varDat), logLikelihood,
control = list(fnscale=-1), hessian = TRUE)
logLikelihood <- function(params, dat = dat) {
# Mean
theta1 <- params$theta1
# Variance
theta2 <- params$theta2
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
rtrn <- logPr + logY - logEY
return(rtrn)
}
optimOut <- optim(par = list(theta1 = meanDat, theta2 = varDat), logLikelihood,
control = list(fnscale=-1), hessian = TRUE)
logLikelihood <- function(params, dat = dat) {
# Mean
theta1 <- params[1]
# Variance
theta2 <- params[2]
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
rtrn <- logPr + logY - logEY
return(rtrn)
}
# optimize the log likelihood function
optimOut <- optim(par = c(meanDat, varDat), logLikelihood,
control = list(fnscale=-1), hessian = TRUE)
optimOut <- optim(par = c(meanDat, varDat), logLikelihood, dat=dat
control = list(fnscale=-1), hessian = TRUE)
optimOut <- optim(par = c(meanDat, varDat), logLikelihood, dat=dat,
control = list(fnscale=-1), hessian = TRUE)
logLikelihood <- function(params, dat = dat) {
# Mean
theta1 <- params[1]
# Variance
theta2 <- params[2]
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
summand <- logPr + logY - logEY
rtrn <- sum(summand)
return(rtrn)
}
optimOut <- optim(par = c(meanDat, varDat), logLikelihood, dat=dat,
control = list(fnscale=-1), hessian = TRUE)
logLikelihood <- function(params, dat = dat) {
# Mean
theta1 <- params[1]
# Variance
theta2 <- params[2]
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
summand <- logPr + logY - logEY
rtrn <- sum(summand)
return(rtrn)
}
logLikelihood(c(meanDat, varDat), dat)
theta1 <- params[1]
# Variance
theta2 <- params[2]
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
theta1
log(theta1)
theta1 <- meanDat
theta2 <- varDat
params <- c(meanDat, varDat)
theta1 <- params[1]
# Variance
theta2 <- params[2]
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
summand <- logPr + logY - logEY
rtrn <- sum(summand)
rtrn
logLikelihood <- function(params, dat = dat) {
# Mean
theta1 <- params[1]
# Variance
theta2 <- params[2]
# Shape
alpha <- theta1^2 / theta2
# Rate
beta <- theta1 / theta2
# log( pr(Y_i | \theta) )
logPr <- dgamma(x = dat, shape = alpha, rate = beta, log = TRUE)
logY <- log(dat)
logEY <- log(theta1)
summand <- logPr + logY - logEY
rtrn <- sum(summand)
return(rtrn)
}
optimOut <- optim(par = c(meanDat, varDat), logLikelihood, dat=dat,
control = list(fnscale=-1), hessian = TRUE)
optimOut
optimOut <- suppressWarnings(optim(par = c(meanDat, varDat), logLikelihood, dat=dat,
control = list(fnscale=-1), hessian = TRUE)
)
optimOut
mleTheta1 <- optimOut$par[1]
mleTheta2 <- optimOut$par[2]
hess <- optimOut$hessian
?symmetric
?isSymmetric
isSymmetrc(hess)
isSymmetric(hess)
?eigen
sum(eigen(hess)$values >= 0) == 0
vals <- eigen(hess)$values
sum(vals >= 0) == 0
sum(vals >= 0) == 0
?qgamma
qnrom(0.95)
qnorm(0.95)
qnorm(0.99)
qnorm(0.9999997)
alpha
qgamma(0.95, shape = alpha, rate = beta)
alpha <- mleTheta1^2 / mleTheta2
beta <- mleTheta1 / mleTheta2
percentile95 <- qgamma(0.95, shape = alpha, rate = beta)
percentile95
mleTheta1
mleTheta2
?dnorm
names(dnorm)
dnorm
fn <- function(x) {return(x^2)}
fn(2)
fn(4)
?optim
optim(1, fn, control = list(fnscale=-1))
optim(1, fn,)
surv <- c(6,7,8,13,15,15,16,17,18,22)
loss <- function(time, pred)
{abs(time - pred) / time}
loss(1,2)
loss(2,1)
sapply(surv, loss)
sapply(surv, loss, pred=15)
sum(sapply(surv, loss, pred=15))
1/time
1/surv
surv[surv < 10]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
invSurv(1,surv)
invSurv(5,surv)
invSurv(6,surv)
source('~/.active-rstudio-document')
invSurv(6,surv)
invSurv(7,surv)
invSurv(8,surv)
invSurv(9,surv)
invSurv(10,surv)
invSurv(15,surv)
invSurv(6.5,surv)
surv[surv >= 6.5]
1 / surv[surv >= 6.5]
mle <- data.frame(t1 = c(78.194162440696, 99.53211, 75.01152, 86.2899, 70.241, 91.30126, 94.39133, 85.82074, 101.78, 97.74616, 85.87174, 69.85466, 109.7952), t2 = c(10391.1023073862, 12846.45771, 11604.23978, 11805.2739, 12415.58, 11975.6, 12313.07484, 12402.29, 13085.66, 12940.12797, 11933.16, 11014.56209, 13357.18), who = c("David", "Qing", "Yuting", "Dan", "Tianchen", "Carrie", "Jean-Philippe", "Emily", "Vivek", "Leo", "James", "Jiawei", "John"))
mle
covariance
?var
cov(mle$t1, mle$t2)
cov(mle$t1, mle$t1)
var(mle$t1)
cov(mle$t1)
cov(mle$t1, mle$t1)
cov(mle$t1, mle$t2)
cov(mle$t2, mle$t2)
setwd("~/Google Drive/Documents/JHSPH/repos/graduate/classes/statistical-theory")
dat2 <- c(3, 4, 4, 3, 6, 0, 2, 4, 4, 3, 3, 5, 2, 2, 4, 3, 5, 4, 1, 2, 3, 3, 6, 0, 5, 6, 5, 2, 4, 4, 0, 4, 4, 1, 2,
8, 4, 7, 3, 5, 3, 3, 2, 4, 5, 7, 3, 2, 4, 5)
dat2 == 0
mean(dat2 == 0)
4^4
